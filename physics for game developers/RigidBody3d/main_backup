


#include<gpp/gpp.h>
#include<gpp_physics/gpp_physics.h>
using namespace gpp;
#include"rigidbody3d.h"

using namespace std;

#define _TIMESTEP 0.1f
#define _GROUND_PLANE 0.0f
float total_time=0.0f;
rigidbody3dlist bodies;

void initialize(uint32 n);
void printAll(const string& msg="");
void updateSimulation(float dt);
bool isColliding(shared_rigidbody3d& r1, shared_rigidbody3d& r2, bcollisioninfo* info);
void calcVelocitys(shared_rigidbody3d& r1, shared_rigidbody3d& r2, bcollisioninfo* info);
void solveCollision(shared_rigidbody3d& r1, shared_rigidbody3d& r2, bcollisioninfo* info);
int main()
{
setlocale(LC_ALL, "Portuguese");
log_set_stdout(false);
initialize(1);
printAll("Imprimindo corpos antes da simulação...");
while(total_time<100)
{
updateSimulation(_TIMESTEP);
if(bodies[0]->vPosition.z<-10)
{
break;
}
}
printAll("Imprimindo corpos depois da simulação...");
return 0;
}

void initialize(uint32 n)
{
shared_rigidbody3d r1=make_shared<rigidbody3d>();
r1->vPosition={50,50,200};
r1->fRadius=5.0f;
r1->fMass=125.0f;
r1->fRestitution=0.9f;
r1->calcInertia();
shared_rigidbody3d r2=make_shared<rigidbody3d>();
r2->vPosition={50,50,-50.0f};
r2->fRadius=50.0f;
bodies.push_back(r1);
bodies.push_back(r2);
}

void printAll(const string& msg)
{
if(msg.size()>0)
_FLOG("{}", msg);
for(auto& it : bodies)
{
_FLOG("{}", it->toString());
}
}

void updateSimulation(float dt)
{
total_time+=dt;
for(auto& it : bodies)
{
if(it->fMass>0.0f)
{
it->calcLoads();
it->updateBodyEuler(dt);
if(it->vPosition.z<15)
{
_FLOG("{:.2f}", it->vPosition.z);
}
}
if((bodies.size()>1)&&(it->fMass>0.0f))
{
for(auto& it2 : bodies)
{
if(&it==&it2)
{
continue;
}
bcollisioninfo info;
if(isColliding(it, it2, &info))
{
shared_rigidbody3d r1, r2;
if(it->fMass<=0.0f)
{
r1=it2;
r2=it;
}
else
{
r1=it;
r2=it2;
}
solveCollision(r1, r2, &info);
}
}
}
}
}

bool isColliding(shared_rigidbody3d& r1, shared_rigidbody3d& r2, bcollisioninfo* info)
{
vector3d vPoint=r1->vPosition-r2->vPosition;
float sqRadius=r1->fRadius+r2->fRadius;
sqRadius*=sqRadius;
if((vPoint*vPoint)>sqRadius) return false;
float distance=sqrt(vPoint*vPoint);
vector3d vNormal=vPoint/distance;
vector3d vCollisionPoint=r2->vPosition+r2->fRadius*vNormal;
info->vNormal=vNormal;
info->vPoint=vCollisionPoint;
info->depth=(r1->fRadius+r2->fRadius)-distance;
return true;
}


void calcVelocitys(shared_rigidbody3d& r1, shared_rigidbody3d& r2, bcollisioninfo* info)
{
vector3d vr;
vector3d vt;
vector3d vel1;
vector3d vel2;
if(r1->fMass>0)
{
/*
    vector3d pt1 = info->vNormal* r1->fRadius;
    pt1 = r1->vPosition + quaternion_vector_rotate(r1->qOrientation, pt1);
vel1 = r1->vVelocity + r1->vAngularVelocity^pt1;
*/
vel1=r1->vVelocity;
}
if(r2->fMass>0)
{
/*
    vector3d pt2 = -info->vNormal * r2->fRadius;
    pt2 = r2->vPosition + quaternion_vector_rotate(r2->qOrientation, pt2);
vel2 = r2->vVelocity + r2->vAngularVelocity^pt2;
*/
vel2=r2->vVelocity;
}
float d1=vel1*vel1;
float d2=vel2*vel2;
if((d1!=0)&&(d2!=0))
{
vr=vel1-vel2;
}
else
{
vr=((d1!=0.0f) ? vel1 : vel2);
}
info->vRelativeVelocity=vr;
info->vTangent=((info->vNormal^info->vRelativeVelocity)^info->vNormal).normalize();
}

void solveCollision(shared_rigidbody3d& r1, shared_rigidbody3d& r2, bcollisioninfo* info)
{
calcVelocitys(r1, r2, info);
float vrn=info->vRelativeVelocity*info->vNormal;
if(vrn<0)
{
float j=-(info->vRelativeVelocity*info->vNormal) * (r1->fRestitution + 1) * r1->fMass;
        vector3d impulse = j * info->vNormal;
        r1->vVelocity += impulse / r1->fMass;
vector3d vTranslate=info->depth*info->vNormal;
r1->vPosition+=vTranslate;
}
}
