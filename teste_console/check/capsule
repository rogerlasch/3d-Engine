#include <iostream>
#include<sstream>
#include <gpp/gpp.h>
#include <gpp_physics/gpp_physics.h>
#include"g_start.h"

using namespace gpp;
using namespace std;

struct obb{
vector3d center;
vector3d dir;
vector3d alph;
obb(const vector3d& center, const vector3d& dir, const vector3d& alph){
this->center=center;
this->dir=dir;
this->alph=alph;
}
void translate(const vector3d& t){
center+=t;
}
void rotate(const vector3d& origin, const quaternion& q){
center=quaternion_vector_rotate(q, center-origin)+origin;
dir=quaternion_vector_rotate(q, dir);
}
string toString()const{
stringstream ss;
ss<<fixed;
ss.precision(2);
ss<<"Center: "<<center<<endl;
ss<<"Orientation: "<<dir<<endl;
ss<<"Alph: "<<alph<<endl;
vector3d min, max;
for(uint32 i=0; i<3; i++){
float r=alph[i]*dir[i];
min[i]=center[i]-r;
max[i]=center[i]+r;
if(max[i]<min[i]) swap(min[i], max[i]);
}
ss<<"Min: "<<min<<endl;
ss<<"Max: "<<max<<endl;
return ss.str();
}
};

class InclinedPlane{
public:
vector3d a;
vector3d b;
vector3d c;
InclinedPlane(const vector3d a, const vector3d b, const vector3d c){
this->a=a;
this->b=b;
this->c=c;
}
std::string toString()const{
stringstream ss;
ss<<fixed;
ss.precision(2);
ss<<"a: "<<a<<endl;
ss<<"b: "<<b<<endl;
ss<<"c: "<<c<<endl;
return ss.str();
}
};

bool sphereCapsule(sphere3d* sp, capsule3d* s, CollisionInfo* info);
bool capsuleCapsule(capsule3d* s1, capsule3d* s2, CollisionInfo* info);
bool capsuleBox(capsule3d* s, box3d* b, CollisionInfo* info);
bool rayCylinder2(const vector3d& origin, const vector3d& dir, const vector3d& min, const vector3d& max, float radius, vector3d& in, vector3d& out);
bool rayCapsule2(const vector3d& origin, const vector3d& dir, const vector3d& start, const vector3d& end, float radius, vector3d& in, vector3d& out) ;

int main()
{
G_STARTER hstart;
InclinedPlane df({10,10,0}, {10,30,20});
vector3d v=df.start;
v.y=9;
cout<<boolalpha<<df.inPlane(v)<<endl;
v.y=15;
cout<<boolalpha<<df.inPlane(v)<<endl;
v.y=30;
cout<<boolalpha<<df.inPlane(v)<<endl;


return 0;
}

bool sphereCapsule(sphere3d* sp, capsule3d* s, CollisionInfo* info){
vector3d closestPoint;
float t=0.0f;
ClosestPtPointSegment(sp->center, s->min, s->max, t, closestPoint);
return collision3d::sphereSphere(sp->center, sp->radius, closestPoint, s->radius, info);
}

bool capsuleCapsule(capsule3d* s1, capsule3d* s2, CollisionInfo* info) {
profiler_snap();
float s, t=0.0f;
vector3d v1, v2;
float sqdist=ClosestPtSegmentSegment(s1->min, s1->max, s2->min, s2->max, s, t, v1, v2);
return collision3d::sphereSphere(v1, s1->radius, v2, s2->radius, info);
}

bool capsuleBox(capsule3d* s, box3d* b, CollisionInfo* info)
{
profiler_snap();;
vector<pair<float, vector3d>> arr;
arr.push_back(make_pair(get_distance_from_aabb(s->min, b->min, b->max), s->min));
arr.push_back(make_pair(get_distance_from_aabb(s->getCenter(), b->min,
b->max), s->getCenter()));
arr.push_back(make_pair(get_distance_from_aabb(s->max, b->min, b->max), s->max));
std::sort(arr.begin(), arr.end(), [&](const pair<float, vector3d>& p1, const pair<float, vector3d>& p2)->bool{return p1.first<p2.first;});
return collision3d::sphereBox(arr[0].second, s->radius, s->getLastPosition(), b, info);
}

bool rayCylinder2(const vector3d& origin, const vector3d& dir, const vector3d& min, const vector3d& max, float radius, vector3d& in, vector3d& out){
    bool hit;
vector3d axis=(max-min).normalize();
    // Calcular os vetores normais das tampas
    vector3d bottomNormal = axis;
    vector3d topNormal = -axis;

    // Calcular os pontos centrais das tampas
    vector3d bottomCenter = min;
    vector3d topCenter = max;

    // Verificar a interseção com a tampa inferior
    float tBottom = vector3d::dotProduct((bottomCenter - origin),bottomNormal) / vector3d::dotProduct(dir, bottomNormal);

    // Verificar a interseção com a tampa superior
    float tTop = vector3d::dotProduct((topCenter - origin), topNormal) /
vector3d::dotProduct(dir, topNormal);

    // Verificar se o raio intersecta alguma tampa
    if (tBottom > 0 && tTop > 0) {
        // Calcular os pontos de interseção
        in = origin + dir * tBottom;
        out = origin + dir * tTop;
if(tBottom>tTop){
swap(in, out);
}
        return true;
    }

//Testar com o corpo do cilindro...
    vector3d RC = origin - min;
    vector3d n =vector3d::crossProduct( dir, axis);
    float ln = n.length();

    if (ln == 0.0) {  // Raio paralelo ao cilindro
        float d = vector3d::dotProduct(RC, axis);
        vector3d D = RC - d * axis;
        d = D.length();
        return (d <= radius);  // Verdadeiro se o raio estiver dentro do cilindro
    }

    n.normalize();
    float d = std::fabs(vector3d::dotProduct(RC, n));
    hit = (d <= radius);

    if (hit) {
        vector3d O =vector3d::crossProduct( RC, axis);
        float t = -vector3d::dotProduct(O, n) / ln;
        vector3d O_cross = vector3d::crossProduct(n, axis);
        O_cross.normalize();
        float s = std::fabs(std::sqrt(radius * radius - d * d) / vector3d::dotProduct(dir, O_cross));
float din = static_cast<float>(t - s);  // Distância de entrada
float dout = static_cast<float>(t + s);  // Distância de saída
in=origin+(dir*din);
out=origin+(dir*dout);
    }
    return hit;
}

bool rayCapsule2(const vector3d& origin, const vector3d& dir, const vector3d& min, const vector3d& max, float radius, vector3d& in, vector3d& out) {
    bool hit;
vector3d axis=(max-min).normalize();
    // Calcular os vetores normais das hemisférios nas extremidades
    vector3d minNormal = (origin - min).normalize();
    vector3d maxNormal = (origin - max).normalize();
    // Calcular os pontos centrais das hemisférios
    vector3d minCenter = min;
    vector3d maxCenter = max;
    // Calcular os raios das hemisférios
    float minRadius = radius;
    float maxRadius = radius;
    // Calcular a interseção com a hemisfério de início
    float tStart = vector3d::dotProduct((minCenter - origin), minNormal);
    // Calcular a interseção com a hemisfério de fim
    float tEnd = vector3d::dotProduct((maxCenter - origin), maxNormal);
    // Verificar se o raio intersecta alguma das hemisférios
    if (tStart >= 0 && tStart * tStart <= minRadius * minRadius) {
        // Raio intersecta a hemisfério de início, calcule o ponto de entrada
        float d = std::sqrt(minRadius * minRadius - tStart * tStart);
        in = origin + dir * (tStart - d);
    } else if (tEnd >= 0 && tEnd * tEnd <= maxRadius * maxRadius) {
        // Raio intersecta a hemisfério de fim, calcule o ponto de entrada
        float d = std::sqrt(maxRadius * maxRadius - tEnd * tEnd);
        in = origin + dir * (tEnd - d);
    }

//Testar com o corpo do cilindro...
    vector3d RC = origin - min;
    vector3d n =vector3d::crossProduct( dir, axis);
    float ln = n.length();

    if (ln == 0.0) {  // Raio paralelo ao cilindro
        float d = vector3d::dotProduct(RC, axis);
        vector3d D = RC - d * axis;
        d = D.length();
        return (d <= radius);  // Verdadeiro se o raio estiver dentro do cilindro
    }

    n.normalize();
    float d = std::fabs(vector3d::dotProduct(RC, n));
    hit = (d <= radius);

    if (hit) {
        vector3d O =vector3d::crossProduct( RC, axis);
        float t = -vector3d::dotProduct(O, n) / ln;
        vector3d O_cross = vector3d::crossProduct(n, axis);
        O_cross.normalize();
        float s = std::fabs(std::sqrt(radius * radius - d * d) / vector3d::dotProduct(dir, O_cross));
float din = static_cast<float>(t - s);  // Distância de entrada
float dout = static_cast<float>(t + s);  // Distância de saída
in=origin+(dir*din);
out=origin+(dir*dout);
    }
    return hit;
}
