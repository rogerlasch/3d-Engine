#include <iostream>
#include<sstream>
#include <gpp/gpp.h>
#include <gpp_physics/gpp_physics.h>
#include"g_start.h"
#include"testes.h"
#include"mRigidBody.h"

using namespace gpp;
using namespace std;

void eulerIntegration(float step, iRigidBody* rb);
void dynamicStaticSolver(CollisionInfo* info);

vector3d calculateTorque(const vector3d& axis, const vector3d& angularVelocity, float damping, float dt);
int main(){
G_STARTER gst;
mRigidBody rb;
rb.mass=5.0f;
rb.invMass=1/rb.mass;
rb.pos={0,0, 50.0f};
for(uint32 i=0; i<100; i++){
//rb.applyForce({0,0,-9.81f*rb.mass});
rb.applyTorque({2.0f, 0.0f, 0.0f});
rb.update(0.2f);
_GINFO("{:.2f}:{:.2f}:{:.2f}", rb.pos.x, rb.pos.y, rb.pos.z);
_GINFO("{:.2f}:{:.2f}:{:.2f}", rb.angularVelocity.x, rb.angularVelocity.y, rb.angularVelocity.z);
}
_GINFO("{}", rb.toString());
return 0;
}

void eulerIntegration(float step, iRigidBody* rb){
if(rb->mass<=0.0f)return;
vector3d a=rb->forces/rb->mass;
rb->velocity+=a*step;
rb->translate(rb->velocity*step);
rb->forces={0.0f, 0.0f, 0.0f};
}

void dynamicStaticSolver(CollisionInfo* info){
iRigidBody* r1=info->r1;
iRigidBody* r2=info->r2;
if(r1->mass<=0.0f) swap(r1, r2);
//Caso r1 seja dinâmico e r2 seja estático...
if(r2->mass<=0.0f){
    float j = (1 + r1->restitution) * (r1->velocity* info->normal) / (1 / r1->mass);
    vector3d impulse = j * info->normal;
r1->velocity-=impulse/r1->mass;
if(info->depth>0.01f){
r1->translate(info->normal*info->depth);
}
}
}

vector3d calculateTorque(const vector3d& axis, const vector3d& angularVelocity, float damping, float dt){
return axis-angularVelocity*damping*dt;
}
