
#define GPP_DOUBLE_PRECISION
#include <iostream>
#include <iomanip>
#include <gpp/gpp.h>
#include <gpp_physics/gpp_physics.h>
#include"g_start.h"
using namespace gpp;
using namespace std;

//#include"obb.h"
#include"obbglm.h"

void boxSphere();
void sphereSphere();
void polygonSphere();
void boxBox();
int main() {
G_STARTER gst;
polygonSphere();
    return 0;
}

void boxSphere(){
    // Criando uma caixa e uma esfera
    Box box(glm::vec3(-1.0f, -1.0f, -1.0f), glm::vec3(1.0f, 1.0f, 1.0f));  // Caixa no centro (0,0,0)
    Sphere sphere(glm::vec3(1.5f, 1.5f, 0.0f), 1.0f);  // Esfera deslocada

    // Verifica colisão usando GJK
        Simplex simplex; // O simplex resultante do GJK (fictício, normalmente vindo do GJK)
    if (GJK(box, sphere, simplex)) {
        std::cout << "Colisão detectada entre a Caixa e a Esfera!" << std::endl;

        // Se houver colisão, execute o EPA para obter informações detalhadas
        EPAResult epaResult = EPA(box, sphere, simplex);

        if (epaResult.collision) {
            std::cout << "Normal da colisão: (" << epaResult.normal.x << ", " << epaResult.normal.y << ", " << epaResult.normal.z << ")" << std::endl;
            std::cout << "Profundidade de penetração: " << epaResult.penetrationDepth << std::endl;
            std::cout << "Ponto de contato: (" << epaResult.contactPoint.x << ", " << epaResult.contactPoint.y << ", " << epaResult.contactPoint.z << ")" << std::endl;
        }
    } else {
        std::cout << "Sem colisão detectada entre a Caixa e a Esfera." << std::endl;
    }
}

void sphereSphere(){
    // Criando duas esferas
    Sphere sphereA(glm::vec3(0.0f, 0.0f, 0.0f), 1.0f);   // Esfera A no centro
    Sphere sphereB(glm::vec3(1.5f, 0.0f, 0.0f), 1.0f);   // Esfera B deslocada

    // Verifica colisão usando GJK
        Simplex simplex; // O simplex resultante do GJK
    if (GJK(sphereA, sphereB, simplex)) {
        std::cout << "Colisão detectada entre as Esferas!" << std::endl;

        // Executa o EPA para obter mais detalhes da colisão
        EPAResult epaResult = EPA(sphereA, sphereB, simplex);

        if (epaResult.collision) {
            std::cout << "Normal da colisão: (" << epaResult.normal.x << ", " << epaResult.normal.y << ", " << epaResult.normal.z << ")" << std::endl;
            std::cout << "Profundidade de penetração: " << epaResult.penetrationDepth << std::endl;
            std::cout << "Ponto de contato: (" << epaResult.contactPoint.x << ", " << epaResult.contactPoint.y << ", " << epaResult.contactPoint.z << ")" << std::endl;
        }
    } else {
        std::cout << "Sem colisão detectada entre as Esferas." << std::endl;
    }
}

void polygonSphere(){
    // Criando um polígono convexo (triângulo) e uma esfera
    std::vector<glm::vec3> vertices = {
        glm::vec3(-1.0f, 0.0f, 0.0f),
        glm::vec3(1.0f, 0.0f, 0.0f),
        glm::vec3(0.0f, 2.0f, 0.0f)
    };
    ConvexPolygon polygon(vertices);  // Um triângulo
    Sphere sphere(glm::vec3(0.0f, 0.0f, 0.0f), 0.5f);  // Esfera perto do triângulo

    // Verifica colisão usando GJK
        Simplex simplex; // O simplex resultante do GJK
    if (GJK(polygon, sphere, simplex)) {
        std::cout << "Colisão detectada entre o Polígono Convexo e a Esfera!" << std::endl;

        // Executa o EPA para obter detalhes da colisão
        EPAResult epaResult = EPA(polygon, sphere, simplex);

        if (epaResult.collision) {
            std::cout << "Normal da colisão: (" << epaResult.normal.x << ", " << epaResult.normal.y << ", " << epaResult.normal.z << ")" << std::endl;
            std::cout << "Profundidade de penetração: " << epaResult.penetrationDepth << std::endl;
            std::cout << "Ponto de contato: (" << epaResult.contactPoint.x << ", " << epaResult.contactPoint.y << ", " << epaResult.contactPoint.z << ")" << std::endl;
        }
    } else {
        std::cout << "Sem colisão detectada entre o Polígono Convexo e a Esfera." << std::endl;
    }
}

void boxBox(){
    // Criando duas caixas
    Box boxA(glm::vec3(-1.0f, -1.0f, -1.0f), glm::vec3(1.0f, 1.0f, 1.0f));  // Caixa A
    Box boxB(glm::vec3(0.5f, 0.5f, 0.5f), glm::vec3(2.0f, 2.0f, 2.0f));     // Caixa B, sobrepondo ligeiramente

    // Verifica colisão usando GJK
        Simplex simplex; // O simplex resultante do GJK
    if (GJK(boxA, boxB, simplex)) {
        std::cout << "Colisão detectada entre as Caixas!" << std::endl;

        // Executa o EPA para obter informações detalhadas
        EPAResult epaResult = EPA(boxA, boxB, simplex);

        if (epaResult.collision) {
            std::cout << "Normal da colisão: (" << epaResult.normal.x << ", " << epaResult.normal.y << ", " << epaResult.normal.z << ")" << std::endl;
            std::cout << "Profundidade de penetração: " << epaResult.penetrationDepth << std::endl;
            std::cout << "Ponto de contato: (" << epaResult.contactPoint.x << ", " << epaResult.contactPoint.y << ", " << epaResult.contactPoint.z << ")" << std::endl;
        }
    } else {
        std::cout << "Sem colisão detectada entre as Caixas." << std::endl;
    }
}
