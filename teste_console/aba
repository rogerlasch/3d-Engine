

#ifndef TESTE_H
#define TESTE_H

using namespace std;


namespace gpp {

// Classe base para formas geométricas
class GeometricShape2 {
protected:
    Transform transform; // Transformação da forma geométrica
    string name;    // Nome da forma (opcional, para debug)

public:
    GeometricShape2(const string& name = "GeometricShape2")
        : name(name) {}

    virtual ~GeometricShape2() = default;

    Transform& getTransform() { return transform; }
    const Transform& getTransform() const { return transform; }

    string getName() const { return name; }
    void setName(const string& name) { this->name = name; }

virtual string toString()=0;
virtual  void getAABB(vector3d& min, vector3d& max) = 0;
    virtual bool contains(const vector3d& point) = 0; // Verifica se um ponto está dentro da forma
    virtual vector3d getClosestPoint(const vector3d& point) = 0; // Retorna o ponto mais próximo na superfície
    virtual vector3d getNormal(const vector3d& point) = 0; // Retorna a normal no ponto mais próximo
    virtual decimal getVolume() const = 0; // Calcula o volume da forma
    virtual decimal getSurfaceArea() const = 0; // Calcula a área da superfície
};

class Sphere2 : public GeometricShape2 {
private:
    decimal radius; // Raio da esfera

public:
    Sphere2(decimal radius, const string& name = "Sphere2")
        : GeometricShape2(name), radius(radius) {}

    string toString() override {

        stringstream ss;
        ss << "Sphere2:\n";
        ss << "  Position: " << transform.getPosition() << "\n";
        ss << "  Radius: " << radius << "\n";
        ss << "  Orientation: " << transform.getOrientation() << "\n";
        ss << "  Scale: " << transform.getScale() << "\n";

vector3d tmin, tmax;
getAABB(tmin, tmax);
string axis="XYZ";
ss<<"Mostrando aabb..."<<endl;
for(int32 i=0; i<3; i++){
ss<<axis[i]<<": "<<tmin[i]<<", "<<tmax[i]<<endl;
}

        return ss.str();
    }

    void getAABB(vector3d& min, vector3d& max) override {
        vector3d center = transform.getPosition();
        decimal r = radius * std::max(std::max(transform.getScale().x, transform.getScale().y), transform.getScale().z);

        min = center - vector3d(r, r, r);
        max = center + vector3d(r, r, r);
    }

    bool contains(const vector3d& point) override {
        vector3d localPoint = transform.toLocal(point);
        return localPoint.length() <= radius;
    }

    vector3d getClosestPoint(const vector3d& point) override {
        vector3d localPoint = transform.toLocal(point);
        vector3d closestLocal = localPoint.normalize() * radius;
        return transform.toGlobal(closestLocal);
    }

    vector3d getNormal(const vector3d& point) override {
        vector3d localPoint = transform.toLocal(point);
        return transform.toGlobal(localPoint.normalize());
    }

    decimal getVolume() const override {
        return (4.0f / 3.0f) * GPP_PI * radius * radius * radius;
    }

    decimal getSurfaceArea() const override {
        return 4.0f * GPP_PI * radius * radius;
    }
};

// Classe derivada para cápsulas
class Capsule2 : public GeometricShape2 {
private:
    decimal radius; // Raio da cápsula
    decimal height; // Altura do cilindro (sem as semiesferas)

public:
    Capsule2(decimal radius, decimal height, const string& name = "Capsule2")
        : GeometricShape2(name), radius(radius), height(height) {}

    // Retorna uma descrição textual da cápsula
    string toString() {
        stringstream ss;
        ss << "Capsule2:\n";
        ss << "  Position: " << transform.getPosition() << "\n";
        ss << "  Radius: " << radius << "\n";
        ss << "  Height: " << height << "\n";
        ss << "  Orientation: " << transform.getOrientation() << "\n";
        ss << "  Scale: " << transform.getScale() << "\n";

vector3d tmin, tmax;
getAABB(tmin, tmax);
string axis="XYZ";
ss<<"Mostrando aabb..."<<endl;
for(int32 i=0; i<3; i++){
ss<<axis[i]<<": "<<tmin[i]<<", "<<tmax[i]<<endl;
}

        return ss.str();
    }

    // Calcula a AABB da cápsula
    void getAABB(vector3d& min, vector3d& max) {
        vector3d center = transform.getPosition();
        vector3d scale = transform.getScale();

        decimal r = radius * std::max(scale.x, scale.z);
        decimal halfHeight = (height / 2) * scale.y;

        min = center - vector3d(r, halfHeight + r, r);
        max = center + vector3d(r, halfHeight + r, r);
    }

    // Implementação dos métodos virtuais
    bool contains(const vector3d& point) override {
        vector3d localPoint = transform.toLocal(point);

        // Projeta o ponto no eixo Y (eixo da cápsula)
        decimal y = max(-height / 2, min(height / 2, localPoint.y));

        // Calcula a distância ao eixo Y
        vector3d closestOnAxis(0, y, 0);
        decimal distance = (localPoint - closestOnAxis).length();

        return distance <= radius;
    }

    vector3d getClosestPoint(const vector3d& point) override {
        vector3d localPoint = transform.toLocal(point);

        // Projeta o ponto no eixo Y (eixo da cápsula)
        decimal y = max(-height / 2, min(height / 2, localPoint.y));

        // Encontra o ponto mais próximo no eixo Y
        vector3d closestOnAxis(0, y, 0);

        // Calcula o ponto mais próximo na superfície
        vector3d closestLocal = closestOnAxis + (localPoint - closestOnAxis).normalize() * radius;
        return transform.toGlobal(closestLocal);
    }

    vector3d getNormal(const vector3d& point) override {
        vector3d localPoint = transform.toLocal(point);

        // Projeta o ponto no eixo Y (eixo da cápsula)
        decimal y = max(-height / 2, min(height / 2, localPoint.y));

        // Encontra o ponto mais próximo no eixo Y
        vector3d closestOnAxis(0, y, 0);

        // Calcula a normal
        vector3d normalLocal = (localPoint - closestOnAxis).normalize();
        return transform.toGlobal(normalLocal);
    }

    decimal getVolume() const override {
        decimal cylinderVolume = GPP_PI * radius * radius * height;
        decimal sphereVolume = (4.0f / 3.0f) * GPP_PI * radius * radius * radius;
        return cylinderVolume + sphereVolume;
    }

    decimal getSurfaceArea() const override {
        decimal cylinderArea = 2 * GPP_PI * radius * height;
        decimal sphereArea = 4 * GPP_PI * radius * radius;
        return cylinderArea + sphereArea;
    }
};

class Box2 : public GeometricShape2 {
private:
    vector3d extents; // Extensões da caixa (largura, altura, profundidade)

public:
    Box2(const vector3d& extents, const string& name = "Box2")
        : GeometricShape2(name), extents(extents) {}

    // Retorna uma descrição textual da caixa
    string toString() {
        stringstream ss;
        ss << "Box2:\n";
        ss << "  Position: " << transform.getPosition() << "\n";
        ss << "  Extents: " << extents << "\n";
        ss << "  Orientation: " << transform.getOrientation() << "\n";
        ss << "  Scale: " << transform.getScale() << "\n";

vector3d tmin, tmax;
getAABB(tmin, tmax);
string axis="XYZ";
ss<<"Mostrando aabb..."<<endl;
for(int32 i=0; i<3; i++){
ss<<axis[i]<<": "<<tmin[i]<<", "<<tmax[i]<<endl;
}

vector<vector3d> vertices=getVertices();
ss<<"Mostrando vértices..."<<endl;
for(auto& it : vertices){
ss<<it<<endl;
}

        return ss.str();
    }

    // Calcula a AABB da caixa
    void getAABB(vector3d& min, vector3d& max) {
vector<vector3d> vertices=getVertices();
min=max=transform.getPosition();

for(auto& it : vertices){
for(uint32 i=0; i<3; i++){
min[i]=std::min(it[i], min[i]);
max[i]=std::max(it[i], max[i]);
}

}
    }

    // Retorna os 8 vértices da OBB
    std::vector<vector3d> getVertices()  {
        std::vector<vector3d> vertices;

        // Obtém a matriz de transformação global
transform.updateLocalMatrix();
        matrix4x4 worldMatrix = transform.getWorldTransformMatrix();

        // Define os 8 vértices locais da caixa (não transformados)
        std::vector<vector3d> localVertices = {
            {-extents.x, -extents.y, -extents.z},
            { extents.x, -extents.y, -extents.z},
            {-extents.x,  extents.y, -extents.z},
            { extents.x,  extents.y, -extents.z},
            {-extents.x, -extents.y,  extents.z},
            { extents.x, -extents.y,  extents.z},
            {-extents.x,  extents.y,  extents.z},
            { extents.x,  extents.y,  extents.z}
        };

        // Transforma os vértices locais para o espaço global
        for (const auto& vertex : localVertices) {
            vertices.push_back(worldMatrix * vertex);
        }

        return vertices;
    }

    // Implementação dos métodos virtuais
    bool contains(const vector3d& point) override {
        vector3d localPoint = transform.toLocal(point);

        // Verifica se o ponto está dentro dos limites da caixa
        return abs(localPoint.x) <= extents.x &&
               abs(localPoint.y) <= extents.y &&
               abs(localPoint.z) <= extents.z;
    }

    vector3d getClosestPoint(const vector3d& point) override {
        vector3d localPoint = transform.toLocal(point);

        // Limita o ponto às extensões da caixa
        vector3d closestLocal(
            max(-extents.x, min(extents.x, localPoint.x)),
            max(-extents.y, min(extents.y, localPoint.y)),
            max(-extents.z, min(extents.z, localPoint.z))
        );

        return transform.toGlobal(closestLocal);
    }

    vector3d getNormal(const vector3d& point) override {
        vector3d localPoint = transform.toLocal(point);

        // Calcula as distâncias às faces da caixa
        decimal dx = abs(localPoint.x) - extents.x;
        decimal dy = abs(localPoint.y) - extents.y;
        decimal dz = abs(localPoint.z) - extents.z;

        // Determina a face mais próxima
        if (dx > dy && dx > dz) {
            return transform.toGlobal(vector3d(localPoint.x > 0 ? 1 : -1, 0, 0));
        } else if (dy > dz) {
            return transform.toGlobal(vector3d(0, localPoint.y > 0 ? 1 : -1, 0));
        } else {
            return transform.toGlobal(vector3d(0, 0, localPoint.z > 0 ? 1 : -1));
        }
    }

    decimal getVolume() const override {
        return 8 * extents.x * extents.y * extents.z;
    }

    decimal getSurfaceArea() const override {
        return 8 * (extents.x * extents.y + extents.y * extents.z + extents.z * extents.x);
    }
};

//testes

void testeSphere(){
    // Cria uma esfera com raio 2
    Sphere2 sphere(2);

    // Define a posição da esfera
    sphere.getTransform().setPosition({5,5,5});

cout<<"Exibindo esfera:\n"<<sphere.toString()<<endl;
    // Verifica se um ponto está dentro da esfera
    vector3d point(3,5,5);
    if (sphere.contains(point)) {
        cout << "O ponto está dentro da esfera!\n";
    } else {
        cout << "O ponto está fora da esfera.\n";
    }

    // Exibe o volume e a área da superfície da esfera
//    cout << "Volume da esfera: " << sphere.getVolume() << endl;
//    cout << "Área da superfície da esfera: " << sphere.getSurfaceArea() << endl;
}

void testeCapsule(){
    // Cria uma cápsula com raio 1 e altura 4
    Capsule2 capsule(2.5, 8);

    // Define a posição da cápsula
    capsule.getTransform().setPosition({10, 10, 7.5});

cout<<"Exibindo cápsula:\n"<<capsule.toString()<<endl;
    // Verifica se um ponto está dentro da cápsula
    vector3d point(7.50, 10, 7);
    if (capsule.contains(point)) {
        cout << "O ponto está dentro da cápsula!\n";
    } else {
        cout << "O ponto está fora da cápsula.\n";
    }

    // Exibe o volume e a área da superfície da cápsula
    cout << "Volume da cápsula: " << capsule.getVolume() << endl;
    cout << "Área da superfície da cápsula: " << capsule.getSurfaceArea() << endl;
}

void testeBox(){
    // Cria uma caixa com extensões (2, 3, 4)
    Box2 box({5,5,5});

    // Define a posição da caixa
//    box.getTransform().setPosition({1, 2, 3});

cout<<"Exibindo caixa:\n"<<box.toString()<<endl;

    // Verifica se um ponto está dentro da caixa
    vector3d point(1, 2, 3);
    if (box.contains(point)) {
        cout << "O ponto está dentro da caixa!\n";
    } else {
        cout << "O ponto está fora da caixa.\n";
    }

    // Exibe o volume e a área da superfície da caixa
    cout << "Volume da caixa: " << box.getVolume() << endl;
    cout << "Área da superfície da caixa: " << box.getSurfaceArea() << endl;

}
} // namespace gpp
#endif
