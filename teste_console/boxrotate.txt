#include <iostream>
#include <gpp/gpp.h>
#include <gpp_physics/gpp_physics.h>
#include <cmath>

using namespace gpp;
using namespace std;

int main()
{
    // Cria uma instância de box3d com os vértices iniciais
    box3d b(vector3d(-1, -1, -1), vector3d(1, 1, 1));

    // Cria uma instância de Quaternion com os valores de rotação desejados
    quaternion rotation(0.7071, 0, 0.7071, 0);

    // Chama o método Rotate passando o Quaternion como parâmetro
    b.Rotate(rotation);

    // Calcule os vértices finais da caixa após a rotação
vector<    vector3d> vertices;
    b.GetVertices(vertices);

    // Compare os vértices finais com o resultado esperado
vector<    vector3d> expected = {
        vector3d(-1.414214, -1, -1.414214),
        vector3d(-1.414214, -1, 1.414214),
        vector3d(-1.414214, 1, -1.414214),
        vector3d(-1.414214, 1, 1.414214),
        vector3d(1.414214, -1, -1.414214),
        vector3d(1.414214, -1, 1.414214),
        vector3d(1.414214, 1, -1.414214),
        vector3d(1.414214, 1, 1.414214)
    };

    for (int i = 0; i < 8; i++)
    {
        if (vertices[i] != expected[i])
        {
cout<<vertices[i]<<expected[i]<<endl;
            cout << "Test failed!" << endl;
            return 1;
        }
    }

    cout << "Test passed!" << endl;
    return 0;
}
